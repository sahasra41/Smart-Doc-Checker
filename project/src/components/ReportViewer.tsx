import React from 'react';
import { Report, Contradiction } from '../types';
import { AlertTriangle, AlertCircle, Info, FileText, Download, CheckCircle } from 'lucide-react';

interface ReportViewerProps {
  report: Report;
  onNewAnalysis: () => void;
}

export const ReportViewer: React.FC<ReportViewerProps> = ({ report, onNewAnalysis }) => {
  const getSeverityIcon = (severity: Contradiction['severity']) => {
    switch (severity) {
      case 'high':
        return <AlertTriangle className="h-5 w-5 text-red-600" />;
      case 'medium':
        return <AlertCircle className="h-5 w-5 text-amber-600" />;
      case 'low':
        return <Info className="h-5 w-5 text-blue-600" />;
    }
  };

  const getSeverityColor = (severity: Contradiction['severity']) => {
    switch (severity) {
      case 'high':
        return 'border-red-200 bg-red-50';
      case 'medium':
        return 'border-amber-200 bg-amber-50';
      case 'low':
        return 'border-blue-200 bg-blue-50';
    }
  };

  const getTypeLabel = (type: Contradiction['type']) => {
    switch (type) {
      case 'time':
        return 'Time Conflict';
      case 'policy':
        return 'Policy Conflict';
      case 'requirement':
        return 'Requirement Conflict';
      case 'procedure':
        return 'Procedure Conflict';
    }
  };

  const downloadReport = () => {
    const reportContent = `
SMART DOC CHECKER - CONTRADICTION REPORT
Generated: ${report.generatedAt.toLocaleString()}
Documents Analyzed: ${report.documents.join(', ')}

SUMMARY
=======
Total Contradictions Found: ${report.summary.totalContradictions}
High Priority: ${report.summary.highPriority}
Medium Priority: ${report.summary.mediumPriority}
Low Priority: ${report.summary.lowPriority}

DETAILED FINDINGS
================
${report.contradictions.map((contradiction, index) => `
${index + 1}. ${getTypeLabel(contradiction.type)} (${contradiction.severity.toUpperCase()} PRIORITY)
   Documents: ${contradiction.documents.join(', ')}
   
   Conflicting Statements:
   ${contradiction.conflictingStatements.map(stmt => `   â€¢ ${stmt}`).join('\n')}
   
   Explanation: ${contradiction.explanation}
   
   Suggested Resolution: ${contradiction.suggestion}
   
   ${contradiction.location ? `Location: ${contradiction.location.map(loc => `${loc.document} (${loc.section})`).join(', ')}` : ''}
`).join('\n')}

---
Report generated by Smart Doc Checker AI
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `contradiction-report-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Report Header */}
      <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6">
        <div className="flex items-start justify-between">
          <div className="flex items-center space-x-3">
            <CheckCircle className="h-8 w-8 text-green-600" />
            <div>
              <h2 className="text-xl font-bold text-gray-900 mb-1">
                Analysis Complete
              </h2>
              <p className="text-gray-600">
                Generated on {report.generatedAt.toLocaleString()}
              </p>
            </div>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={downloadReport}
              className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </button>
            <button
              onClick={onNewAnalysis}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              New Analysis
            </button>
          </div>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Issues</p>
              <p className="text-2xl font-bold text-gray-900">{report.summary.totalContradictions}</p>
            </div>
            <FileText className="h-8 w-8 text-gray-400" />
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg border border-red-200 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-red-600">High Priority</p>
              <p className="text-2xl font-bold text-red-900">{report.summary.highPriority}</p>
            </div>
            <AlertTriangle className="h-8 w-8 text-red-400" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg border border-amber-200 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-amber-600">Medium Priority</p>
              <p className="text-2xl font-bold text-amber-900">{report.summary.mediumPriority}</p>
            </div>
            <AlertCircle className="h-8 w-8 text-amber-400" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg border border-blue-200 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-blue-600">Low Priority</p>
              <p className="text-2xl font-bold text-blue-900">{report.summary.lowPriority}</p>
            </div>
            <Info className="h-8 w-8 text-blue-400" />
          </div>
        </div>
      </div>

      {/* Documents Analyzed */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-3">Documents Analyzed</h3>
        <div className="flex flex-wrap gap-2">
          {report.documents.map((doc, index) => (
            <span
              key={index}
              className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800"
            >
              {doc}
            </span>
          ))}
        </div>
      </div>

      {/* Contradictions List */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">Detailed Findings</h3>
        {report.contradictions.length === 0 ? (
          <div className="text-center py-12 bg-green-50 border border-green-200 rounded-lg">
            <CheckCircle className="mx-auto h-12 w-12 text-green-600 mb-4" />
            <h3 className="text-lg font-medium text-green-900 mb-2">No Contradictions Found!</h3>
            <p className="text-green-700">Your documents appear to be consistent and well-aligned.</p>
          </div>
        ) : (
          report.contradictions.map((contradiction, index) => (
            <div
              key={contradiction.id}
              className={`border rounded-lg p-6 ${getSeverityColor(contradiction.severity)}`}
            >
              <div className="flex items-start space-x-4">
                {getSeverityIcon(contradiction.severity)}
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="text-lg font-semibold text-gray-900">
                      {getTypeLabel(contradiction.type)}
                    </h4>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${
                      contradiction.severity === 'high' ? 'bg-red-100 text-red-800' :
                      contradiction.severity === 'medium' ? 'bg-amber-100 text-amber-800' :
                      'bg-blue-100 text-blue-800'
                    }`}>
                      {contradiction.severity.toUpperCase()} PRIORITY
                    </span>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <h5 className="font-medium text-gray-900 mb-2">Conflicting Statements:</h5>
                      <div className="space-y-2">
                        {contradiction.conflictingStatements.map((statement, idx) => (
                          <div key={idx} className="flex items-start space-x-2">
                            <div className="w-2 h-2 bg-red-400 rounded-full mt-2 flex-shrink-0"></div>
                            <p className="text-gray-700">{statement}</p>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h5 className="font-medium text-gray-900 mb-1">Found in:</h5>
                      <p className="text-gray-600">{contradiction.documents.join(', ')}</p>
                    </div>

                    <div>
                      <h5 className="font-medium text-gray-900 mb-1">Explanation:</h5>
                      <p className="text-gray-700">{contradiction.explanation}</p>
                    </div>

                    <div className="bg-white/60 rounded-md p-4">
                      <h5 className="font-medium text-gray-900 mb-1">Suggested Resolution:</h5>
                      <p className="text-gray-700">{contradiction.suggestion}</p>
                    </div>

                    {contradiction.location && (
                      <div>
                        <h5 className="font-medium text-gray-900 mb-1">Location:</h5>
                        <div className="text-sm text-gray-600">
                          {contradiction.location.map((loc, idx) => (
                            <span key={idx} className="inline-block mr-4">
                              {loc.document} {loc.section && `(${loc.section})`}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};